https://www.onlinegdb.com/fork/rJxDiM9vVD#

Dancing Monkey problem
Problem Description
N monkeys are invited to a party where they start dancing. They dance in a
circular formation, very similar to a Gujarati Garba or a Drum Circle. The
dance requires the monkeys to constantly change positions after every 1
second.
The change of position is not random & you, in the audience, observe a
pattern. Monkeys are very disciplined & follow a specific pattern while
dancing.
Consider N = 6, and an array monkeys = {3,6,5,4,1,2}.
This array (1-indexed) is the dancing pattern. The value at monkeys[i],
indicates the new of position of the monkey who is standing at the ith
position.
Given N & the array monkeys[ ], find the time after which all monkeys are
in the initial positions for the 1st time.
Constraints
1<=t<=10 (test cases)
1<=N<=10000 (Number of monkeys)
Input Format
First line contains single integer t, denoting the number of test cases.
Each test case is as follows -
Integer N denoting the number of monkeys.
Next line contains N integer denoting the dancing pattern array, monkeys[].
Output
t lines,
Each line must contain a single integer T, where T is the minimum number of
seconds after which all the monkeys are in their initial position.
Timeout
1
Explanation
Example 1
Input
1
6
3 6 5 4 1 2
Output
6
Explanation

Consider N = 6, and an array monkeys = {3,6,5,4,1,2}.
Suppose monkeys are a,b,c,d,e,f, & Initial position (at t = 0) ->
a,b,c,d,e,f
At t = 1 -> e,f,a,d,c,b
a will move to 3rd position, b will move to 6th position, c will move to
5th position, d will move to 4th position, e will move to 1st position and
f will move to 2nd position. Thus from a,b,c,d,e,f at t =0, we get
e,f,a,d,c,b at t =1. Recursively applying same transpositions, we get
following positions for different values of t.
At t = 2 -> c,b,e,d,a,f
At t = 3 -> a,f,c,d,e,b
At t = 4 -> e,b,a,d,c,f
At t = 5 -> c,f,e,d,a,b
At t = 6 -> a,b,c,d,e,f
Since at t = 6, we got the original position, therefore the answer is 6.
//code in java

//Assuming the initial positions of monkeys are 1 2 .... n



import java.util.*;
public class Main
{
  public static void copy(int dest[],int source[]) {
for(int i=0;i<dest.length;i++) {
dest[i]=source[i];
}
}

public static void main(String[] args) {

Scanner sc=new Scanner(System.in);
System.out.println("Enter the number of test cases");
int testcases=sc.nextInt();
int []sol=new int[testcases];
int count=0;
int tc=testcases;
//Let us name n number of monkeys as numbers from t 1o n
//Let us consider that monkey 1 is at 1st position, monkey 2 at 2nd position,..,monkey n at nth position
while(tc>0) {
System.out.println("Enter the number of monkeys for test case "+ (count+1)+":");
int n=sc.nextInt();

System.out.println("Enter the monkey patterns for test case "+ (count+1)+":");

int monkeys[]=new int[n];
for(int i=0;i<n;i++)
monkeys[i]=sc.nextInt();

//int arr[]= {3,6,5,4,1,2}; monkeys[]
int newarr[]= new int[n];
//initializing from 1 to n
for(int i=0;i<n;i++)
newarr[i]=i+1;
int copy[]=new int[monkeys.length];
int copy_prev[]=new int[monkeys.length];

copy(copy,newarr);
copy(copy_prev,copy);


int t=0;
int flag=0;
//1st iteration
for(int i=0;i<monkeys.length;i++) {
copy[monkeys[i]-1]=copy_prev[i];
}
while(!Arrays.equals(copy, newarr)) {
flag=1;
t=t+1;
copy(copy_prev,copy);
for(int i=0;i<monkeys.length;i++) {

copy[monkeys[i]-1]=copy_prev[i];
}
}
if(flag==1)
sol[count]=t+1;// for including the 1st iteration
else
sol[count]=t;
count++;
tc--;
}
//end of while test case body//
System.out.println("The time taken for all monkeys to reach the initial position for each test case in seconds:");
for(int i=0;i<testcases;i++)
System.out.println("For testcase "+(i+1)+" is:"+sol[i]);
sc.close();

}

}


